// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca_protomsg.proto

#include "ca_protomsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SignNodeMsg::SignNodeMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pub_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignNodeMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignNodeMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignNodeMsgDefaultTypeInternal() {}
  union {
    SignNodeMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignNodeMsgDefaultTypeInternal _SignNodeMsg_default_instance_;
PROTOBUF_CONSTEXPR TxMsgInfo::TxMsgInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMsgInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMsgInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMsgInfoDefaultTypeInternal() {}
  union {
    TxMsgInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMsgInfoDefaultTypeInternal _TxMsgInfo_default_instance_;
PROTOBUF_CONSTEXPR TxMsgReq::TxMsgReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signnodemsg_)*/{}
  , /*decltype(_impl_.prevblkhashs_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.txmsginfo_)*/nullptr
  , /*decltype(_impl_.vrfinfo_)*/nullptr
  , /*decltype(_impl_.txvrfinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMsgReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMsgReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMsgReqDefaultTypeInternal() {}
  union {
    TxMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMsgReqDefaultTypeInternal _TxMsgReq_default_instance_;
PROTOBUF_CONSTEXPR Vrf::Vrf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vrfsign_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VrfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VrfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VrfDefaultTypeInternal() {}
  union {
    Vrf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VrfDefaultTypeInternal _Vrf_default_instance_;
PROTOBUF_CONSTEXPR TxMsgAck::TxMsgAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMsgAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMsgAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMsgAckDefaultTypeInternal() {}
  union {
    TxMsgAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMsgAckDefaultTypeInternal _TxMsgAck_default_instance_;
PROTOBUF_CONSTEXPR BuildBlockBroadcastMsg::BuildBlockBroadcastMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.castaddrs_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockraw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vrfinfo_)*/nullptr
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuildBlockBroadcastMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildBlockBroadcastMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildBlockBroadcastMsgDefaultTypeInternal() {}
  union {
    BuildBlockBroadcastMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildBlockBroadcastMsgDefaultTypeInternal _BuildBlockBroadcastMsg_default_instance_;
PROTOBUF_CONSTEXPR BuildBlockBroadcastMsgAck::BuildBlockBroadcastMsgAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuildBlockBroadcastMsgAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildBlockBroadcastMsgAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildBlockBroadcastMsgAckDefaultTypeInternal() {}
  union {
    BuildBlockBroadcastMsgAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildBlockBroadcastMsgAckDefaultTypeInternal _BuildBlockBroadcastMsgAck_default_instance_;
PROTOBUF_CONSTEXPR TxPendingBroadcastMsg::TxPendingBroadcastMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.txraw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prevblkheight_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxPendingBroadcastMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxPendingBroadcastMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxPendingBroadcastMsgDefaultTypeInternal() {}
  union {
    TxPendingBroadcastMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxPendingBroadcastMsgDefaultTypeInternal _TxPendingBroadcastMsg_default_instance_;
PROTOBUF_CONSTEXPR ConfirmTransactionReq::ConfirmTransactionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmTransactionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmTransactionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmTransactionReqDefaultTypeInternal() {}
  union {
    ConfirmTransactionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmTransactionReqDefaultTypeInternal _ConfirmTransactionReq_default_instance_;
PROTOBUF_CONSTEXPR ConfirmTransactionAck::ConfirmTransactionAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_raw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmTransactionAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmTransactionAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmTransactionAckDefaultTypeInternal() {}
  union {
    ConfirmTransactionAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmTransactionAckDefaultTypeInternal _ConfirmTransactionAck_default_instance_;
PROTOBUF_CONSTEXPR ConfirmTransactionIsSuccessReq::ConfirmTransactionIsSuccessReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_raw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmTransactionIsSuccessReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmTransactionIsSuccessReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmTransactionIsSuccessReqDefaultTypeInternal() {}
  union {
    ConfirmTransactionIsSuccessReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmTransactionIsSuccessReqDefaultTypeInternal _ConfirmTransactionIsSuccessReq_default_instance_;
PROTOBUF_CONSTEXPR ConfirmTransactionIsSuccessAck::ConfirmTransactionIsSuccessAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_raw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmTransactionIsSuccessAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmTransactionIsSuccessAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmTransactionIsSuccessAckDefaultTypeInternal() {}
  union {
    ConfirmTransactionIsSuccessAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmTransactionIsSuccessAckDefaultTypeInternal _ConfirmTransactionIsSuccessAck_default_instance_;
PROTOBUF_CONSTEXPR FailureBroadcastMsg::FailureBroadcastMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FailureBroadcastMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FailureBroadcastMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FailureBroadcastMsgDefaultTypeInternal() {}
  union {
    FailureBroadcastMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FailureBroadcastMsgDefaultTypeInternal _FailureBroadcastMsg_default_instance_;
static ::_pb::Metadata file_level_metadata_ca_5fprotomsg_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ca_5fprotomsg_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ca_5fprotomsg_2eproto = nullptr;

const uint32_t TableStruct_ca_5fprotomsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _impl_.pub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::TxMsgInfo, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.txmsginfo_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.vrfinfo_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.txvrfinfo_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.signnodemsg_),
  PROTOBUF_FIELD_OFFSET(::TxMsgReq, _impl_.prevblkhashs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vrf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vrf, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Vrf, _impl_.vrfsign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::TxMsgAck, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.blockraw_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.vrfinfo_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsg, _impl_.castaddrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsgAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsgAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsgAck, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsgAck, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::BuildBlockBroadcastMsgAck, _impl_.blockhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxPendingBroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TxPendingBroadcastMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::TxPendingBroadcastMsg, _impl_.txraw_),
  PROTOBUF_FIELD_OFFSET(::TxPendingBroadcastMsg, _impl_.prevblkheight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionReq, _impl_.tx_hash_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionReq, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionAck, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionAck, _impl_.tx_hash_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionAck, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionAck, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionAck, _impl_.block_raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessReq, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessReq, _impl_.block_raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessAck, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessAck, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessAck, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::ConfirmTransactionIsSuccessAck, _impl_.block_raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FailureBroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FailureBroadcastMsg, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::FailureBroadcastMsg, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::FailureBroadcastMsg, _impl_.info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SignNodeMsg)},
  { 9, -1, -1, sizeof(::TxMsgInfo)},
  { 18, -1, -1, sizeof(::TxMsgReq)},
  { 30, -1, -1, sizeof(::Vrf)},
  { 38, -1, -1, sizeof(::TxMsgAck)},
  { 48, -1, -1, sizeof(::BuildBlockBroadcastMsg)},
  { 61, -1, -1, sizeof(::BuildBlockBroadcastMsgAck)},
  { 71, -1, -1, sizeof(::TxPendingBroadcastMsg)},
  { 80, -1, -1, sizeof(::ConfirmTransactionReq)},
  { 90, -1, -1, sizeof(::ConfirmTransactionAck)},
  { 102, -1, -1, sizeof(::ConfirmTransactionIsSuccessReq)},
  { 111, -1, -1, sizeof(::ConfirmTransactionIsSuccessAck)},
  { 121, -1, -1, sizeof(::FailureBroadcastMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SignNodeMsg_default_instance_._instance,
  &::_TxMsgInfo_default_instance_._instance,
  &::_TxMsgReq_default_instance_._instance,
  &::_Vrf_default_instance_._instance,
  &::_TxMsgAck_default_instance_._instance,
  &::_BuildBlockBroadcastMsg_default_instance_._instance,
  &::_BuildBlockBroadcastMsgAck_default_instance_._instance,
  &::_TxPendingBroadcastMsg_default_instance_._instance,
  &::_ConfirmTransactionReq_default_instance_._instance,
  &::_ConfirmTransactionAck_default_instance_._instance,
  &::_ConfirmTransactionIsSuccessReq_default_instance_._instance,
  &::_ConfirmTransactionIsSuccessAck_default_instance_._instance,
  &::_FailureBroadcastMsg_default_instance_._instance,
};

const char descriptor_table_protodef_ca_5fprotomsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ca_protomsg.proto\032\nsign.proto\"4\n\013SignN"
  "odeMsg\022\n\n\002id\030\001 \001(\t\022\014\n\004sign\030\002 \001(\014\022\013\n\003pub\030"
  "\003 \001(\014\"5\n\tTxMsgInfo\022\014\n\004type\030\001 \001(\r\022\n\n\002tx\030\002"
  " \001(\014\022\016\n\006height\030\003 \001(\004\"\243\001\n\010TxMsgReq\022\017\n\007ver"
  "sion\030\001 \001(\t\022\035\n\ttxMsgInfo\030\002 \001(\0132\n.TxMsgInf"
  "o\022\025\n\007vrfInfo\030\003 \001(\0132\004.Vrf\022\027\n\ttxvrfInfo\030\004 "
  "\001(\0132\004.Vrf\022!\n\013signNodeMsg\030\005 \003(\0132\014.SignNod"
  "eMsg\022\024\n\014prevBlkHashs\030\006 \003(\t\",\n\003Vrf\022\014\n\004dat"
  "a\030\001 \001(\t\022\027\n\007Vrfsign\030\002 \001(\0132\006.CSign\"F\n\010TxMs"
  "gAck\022\017\n\007version\030\001 \001(\t\022\014\n\004code\030\002 \001(\005\022\017\n\007m"
  "essage\030\003 \001(\t\022\n\n\002tx\030\004 \001(\014\"\215\001\n\026BuildBlockB"
  "roadcastMsg\022\017\n\007version\030\001 \001(\t\022\n\n\002id\030\002 \001(\t"
  "\022\020\n\010blockRaw\030\003 \001(\014\022\025\n\007vrfInfo\030\004 \001(\0132\004.Vr"
  "f\022\014\n\004flag\030\005 \001(\005\022\014\n\004type\030\006 \001(\005\022\021\n\tcastAdd"
  "rs\030\007 \003(\t\"\\\n\031BuildBlockBroadcastMsgAck\022\017\n"
  "\007version\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\017\n\007success\030\003 "
  "\001(\t\022\021\n\tblockhash\030\004 \001(\t\"N\n\025TxPendingBroad"
  "castMsg\022\017\n\007version\030\001 \001(\t\022\r\n\005txRaw\030\002 \001(\014\022"
  "\025\n\rprevBlkHeight\030\003 \001(\004\"f\n\025ConfirmTransac"
  "tionReq\022\017\n\007version\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\017\n\007"
  "tx_hash\030\003 \001(\t\022\037\n\004flag\030\004 \001(\0162\021.ConfirmCac"
  "heFlag\"\212\001\n\025ConfirmTransactionAck\022\017\n\007vers"
  "ion\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\017\n\007tx_hash\030\003 \001(\t\022\037"
  "\n\004flag\030\004 \001(\0162\021.ConfirmCacheFlag\022\017\n\007succe"
  "ss\030\005 \001(\010\022\021\n\tblock_raw\030\006 \001(\014\"P\n\036ConfirmTr"
  "ansactionIsSuccessReq\022\017\n\007version\030\001 \001(\t\022\n"
  "\n\002id\030\002 \001(\t\022\021\n\tblock_raw\030\003 \001(\014\"a\n\036Confirm"
  "TransactionIsSuccessAck\022\017\n\007version\030\001 \001(\t"
  "\022\n\n\002id\030\002 \001(\t\022\017\n\007success\030\003 \001(\t\022\021\n\tblock_r"
  "aw\030\004 \001(\014\"@\n\023FailureBroadcastMsg\022\017\n\007versi"
  "on\030\001 \001(\t\022\n\n\002tx\030\002 \001(\014\022\014\n\004info\030\003 \001(\t*Q\n\020Co"
  "nfirmCacheFlag\022\026\n\022ConfirmUnknownFlag\020\000\022\021"
  "\n\rConfirmTxFlag\020\001\022\022\n\016ConfirmRpcFlag\020\002b\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ca_5fprotomsg_2eproto_deps[1] = {
  &::descriptor_table_sign_2eproto,
};
static ::_pbi::once_flag descriptor_table_ca_5fprotomsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ca_5fprotomsg_2eproto = {
    false, false, 1325, descriptor_table_protodef_ca_5fprotomsg_2eproto,
    "ca_protomsg.proto",
    &descriptor_table_ca_5fprotomsg_2eproto_once, descriptor_table_ca_5fprotomsg_2eproto_deps, 1, 13,
    schemas, file_default_instances, TableStruct_ca_5fprotomsg_2eproto::offsets,
    file_level_metadata_ca_5fprotomsg_2eproto, file_level_enum_descriptors_ca_5fprotomsg_2eproto,
    file_level_service_descriptors_ca_5fprotomsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ca_5fprotomsg_2eproto_getter() {
  return &descriptor_table_ca_5fprotomsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ca_5fprotomsg_2eproto(&descriptor_table_ca_5fprotomsg_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfirmCacheFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ca_5fprotomsg_2eproto);
  return file_level_enum_descriptors_ca_5fprotomsg_2eproto[0];
}
bool ConfirmCacheFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SignNodeMsg::_Internal {
 public:
};

SignNodeMsg::SignNodeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SignNodeMsg)
}
SignNodeMsg::SignNodeMsg(const SignNodeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignNodeMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.pub_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pub().empty()) {
    _this->_impl_.pub_.Set(from._internal_pub(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SignNodeMsg)
}

inline void SignNodeMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.pub_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pub_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pub_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignNodeMsg::~SignNodeMsg() {
  // @@protoc_insertion_point(destructor:SignNodeMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignNodeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.sign_.Destroy();
  _impl_.pub_.Destroy();
}

void SignNodeMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignNodeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SignNodeMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _impl_.pub_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignNodeMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SignNodeMsg.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pub();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignNodeMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignNodeMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SignNodeMsg.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sign(), target);
  }

  // bytes pub = 3;
  if (!this->_internal_pub().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pub(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignNodeMsg)
  return target;
}

size_t SignNodeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignNodeMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes sign = 2;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes pub = 3;
  if (!this->_internal_pub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignNodeMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignNodeMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignNodeMsg::GetClassData() const { return &_class_data_; }


void SignNodeMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignNodeMsg*>(&to_msg);
  auto& from = static_cast<const SignNodeMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SignNodeMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (!from._internal_pub().empty()) {
    _this->_internal_set_pub(from._internal_pub());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignNodeMsg::CopyFrom(const SignNodeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignNodeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignNodeMsg::IsInitialized() const {
  return true;
}

void SignNodeMsg::InternalSwap(SignNodeMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pub_, lhs_arena,
      &other->_impl_.pub_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignNodeMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[0]);
}

// ===================================================================

class TxMsgInfo::_Internal {
 public:
};

TxMsgInfo::TxMsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxMsgInfo)
}
TxMsgInfo::TxMsgInfo(const TxMsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMsgInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:TxMsgInfo)
}

inline void TxMsgInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , decltype(_impl_.height_){uint64_t{0u}}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxMsgInfo::~TxMsgInfo() {
  // @@protoc_insertion_point(destructor:TxMsgInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMsgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_.Destroy();
}

void TxMsgInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TxMsgInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMsgInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMsgInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxMsgInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes tx = 2;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx(), target);
  }

  // uint64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxMsgInfo)
  return target;
}

size_t TxMsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxMsgInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 2;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // uint64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMsgInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMsgInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMsgInfo::GetClassData() const { return &_class_data_; }


void TxMsgInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMsgInfo*>(&to_msg);
  auto& from = static_cast<const TxMsgInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxMsgInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMsgInfo::CopyFrom(const TxMsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxMsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsgInfo::IsInitialized() const {
  return true;
}

void TxMsgInfo::InternalSwap(TxMsgInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxMsgInfo, _impl_.type_)
      + sizeof(TxMsgInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TxMsgInfo, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsgInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[1]);
}

// ===================================================================

class TxMsgReq::_Internal {
 public:
  static const ::TxMsgInfo& txmsginfo(const TxMsgReq* msg);
  static const ::Vrf& vrfinfo(const TxMsgReq* msg);
  static const ::Vrf& txvrfinfo(const TxMsgReq* msg);
};

const ::TxMsgInfo&
TxMsgReq::_Internal::txmsginfo(const TxMsgReq* msg) {
  return *msg->_impl_.txmsginfo_;
}
const ::Vrf&
TxMsgReq::_Internal::vrfinfo(const TxMsgReq* msg) {
  return *msg->_impl_.vrfinfo_;
}
const ::Vrf&
TxMsgReq::_Internal::txvrfinfo(const TxMsgReq* msg) {
  return *msg->_impl_.txvrfinfo_;
}
TxMsgReq::TxMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxMsgReq)
}
TxMsgReq::TxMsgReq(const TxMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMsgReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signnodemsg_){from._impl_.signnodemsg_}
    , decltype(_impl_.prevblkhashs_){from._impl_.prevblkhashs_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.txmsginfo_){nullptr}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.txvrfinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_txmsginfo()) {
    _this->_impl_.txmsginfo_ = new ::TxMsgInfo(*from._impl_.txmsginfo_);
  }
  if (from._internal_has_vrfinfo()) {
    _this->_impl_.vrfinfo_ = new ::Vrf(*from._impl_.vrfinfo_);
  }
  if (from._internal_has_txvrfinfo()) {
    _this->_impl_.txvrfinfo_ = new ::Vrf(*from._impl_.txvrfinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:TxMsgReq)
}

inline void TxMsgReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signnodemsg_){arena}
    , decltype(_impl_.prevblkhashs_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.txmsginfo_){nullptr}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.txvrfinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxMsgReq::~TxMsgReq() {
  // @@protoc_insertion_point(destructor:TxMsgReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signnodemsg_.~RepeatedPtrField();
  _impl_.prevblkhashs_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.txmsginfo_;
  if (this != internal_default_instance()) delete _impl_.vrfinfo_;
  if (this != internal_default_instance()) delete _impl_.txvrfinfo_;
}

void TxMsgReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:TxMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signnodemsg_.Clear();
  _impl_.prevblkhashs_.Clear();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.txmsginfo_ != nullptr) {
    delete _impl_.txmsginfo_;
  }
  _impl_.txmsginfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.txvrfinfo_ != nullptr) {
    delete _impl_.txvrfinfo_;
  }
  _impl_.txvrfinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMsgReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxMsgReq.version"));
        } else
          goto handle_unusual;
        continue;
      // .TxMsgInfo txMsgInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_txmsginfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vrf vrfInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vrf txvrfInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_txvrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SignNodeMsg signNodeMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signnodemsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string prevBlkHashs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prevblkhashs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "TxMsgReq.prevBlkHashs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .TxMsgInfo txMsgInfo = 2;
  if (this->_internal_has_txmsginfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::txmsginfo(this),
        _Internal::txmsginfo(this).GetCachedSize(), target, stream);
  }

  // .Vrf vrfInfo = 3;
  if (this->_internal_has_vrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vrfinfo(this),
        _Internal::vrfinfo(this).GetCachedSize(), target, stream);
  }

  // .Vrf txvrfInfo = 4;
  if (this->_internal_has_txvrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::txvrfinfo(this),
        _Internal::txvrfinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .SignNodeMsg signNodeMsg = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signnodemsg_size()); i < n; i++) {
    const auto& repfield = this->_internal_signnodemsg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string prevBlkHashs = 6;
  for (int i = 0, n = this->_internal_prevblkhashs_size(); i < n; i++) {
    const auto& s = this->_internal_prevblkhashs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgReq.prevBlkHashs");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxMsgReq)
  return target;
}

size_t TxMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SignNodeMsg signNodeMsg = 5;
  total_size += 1UL * this->_internal_signnodemsg_size();
  for (const auto& msg : this->_impl_.signnodemsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string prevBlkHashs = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.prevblkhashs_.size());
  for (int i = 0, n = _impl_.prevblkhashs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.prevblkhashs_.Get(i));
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .TxMsgInfo txMsgInfo = 2;
  if (this->_internal_has_txmsginfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.txmsginfo_);
  }

  // .Vrf vrfInfo = 3;
  if (this->_internal_has_vrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfinfo_);
  }

  // .Vrf txvrfInfo = 4;
  if (this->_internal_has_txvrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.txvrfinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMsgReq::GetClassData() const { return &_class_data_; }


void TxMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMsgReq*>(&to_msg);
  auto& from = static_cast<const TxMsgReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxMsgReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signnodemsg_.MergeFrom(from._impl_.signnodemsg_);
  _this->_impl_.prevblkhashs_.MergeFrom(from._impl_.prevblkhashs_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_txmsginfo()) {
    _this->_internal_mutable_txmsginfo()->::TxMsgInfo::MergeFrom(
        from._internal_txmsginfo());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_internal_mutable_vrfinfo()->::Vrf::MergeFrom(
        from._internal_vrfinfo());
  }
  if (from._internal_has_txvrfinfo()) {
    _this->_internal_mutable_txvrfinfo()->::Vrf::MergeFrom(
        from._internal_txvrfinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMsgReq::CopyFrom(const TxMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsgReq::IsInitialized() const {
  return true;
}

void TxMsgReq::InternalSwap(TxMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signnodemsg_.InternalSwap(&other->_impl_.signnodemsg_);
  _impl_.prevblkhashs_.InternalSwap(&other->_impl_.prevblkhashs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxMsgReq, _impl_.txvrfinfo_)
      + sizeof(TxMsgReq::_impl_.txvrfinfo_)
      - PROTOBUF_FIELD_OFFSET(TxMsgReq, _impl_.txmsginfo_)>(
          reinterpret_cast<char*>(&_impl_.txmsginfo_),
          reinterpret_cast<char*>(&other->_impl_.txmsginfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsgReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[2]);
}

// ===================================================================

class Vrf::_Internal {
 public:
  static const ::CSign& vrfsign(const Vrf* msg);
};

const ::CSign&
Vrf::_Internal::vrfsign(const Vrf* msg) {
  return *msg->_impl_.vrfsign_;
}
void Vrf::clear_vrfsign() {
  if (GetArenaForAllocation() == nullptr && _impl_.vrfsign_ != nullptr) {
    delete _impl_.vrfsign_;
  }
  _impl_.vrfsign_ = nullptr;
}
Vrf::Vrf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vrf)
}
Vrf::Vrf(const Vrf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vrf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.vrfsign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vrfsign()) {
    _this->_impl_.vrfsign_ = new ::CSign(*from._impl_.vrfsign_);
  }
  // @@protoc_insertion_point(copy_constructor:Vrf)
}

inline void Vrf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.vrfsign_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vrf::~Vrf() {
  // @@protoc_insertion_point(destructor:Vrf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vrf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vrfsign_;
}

void Vrf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vrf::Clear() {
// @@protoc_insertion_point(message_clear_start:Vrf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.vrfsign_ != nullptr) {
    delete _impl_.vrfsign_;
  }
  _impl_.vrfsign_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vrf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Vrf.data"));
        } else
          goto handle_unusual;
        continue;
      // .CSign Vrfsign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfsign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vrf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vrf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Vrf.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .CSign Vrfsign = 2;
  if (this->_internal_has_vrfsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vrfsign(this),
        _Internal::vrfsign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vrf)
  return target;
}

size_t Vrf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vrf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .CSign Vrfsign = 2;
  if (this->_internal_has_vrfsign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfsign_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vrf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vrf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vrf::GetClassData() const { return &_class_data_; }


void Vrf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vrf*>(&to_msg);
  auto& from = static_cast<const Vrf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vrf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_vrfsign()) {
    _this->_internal_mutable_vrfsign()->::CSign::MergeFrom(
        from._internal_vrfsign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vrf::CopyFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vrf::IsInitialized() const {
  return true;
}

void Vrf::InternalSwap(Vrf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.vrfsign_, other->_impl_.vrfsign_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vrf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[3]);
}

// ===================================================================

class TxMsgAck::_Internal {
 public:
};

TxMsgAck::TxMsgAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxMsgAck)
}
TxMsgAck::TxMsgAck(const TxMsgAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMsgAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:TxMsgAck)
}

inline void TxMsgAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxMsgAck::~TxMsgAck() {
  // @@protoc_insertion_point(destructor:TxMsgAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMsgAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.message_.Destroy();
  _impl_.tx_.Destroy();
}

void TxMsgAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:TxMsgAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMsgAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxMsgAck.version"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxMsgAck.message"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMsgAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxMsgAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsgAck.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxMsgAck)
  return target;
}

size_t TxMsgAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxMsgAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes tx = 4;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMsgAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMsgAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMsgAck::GetClassData() const { return &_class_data_; }


void TxMsgAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMsgAck*>(&to_msg);
  auto& from = static_cast<const TxMsgAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxMsgAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMsgAck::CopyFrom(const TxMsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxMsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsgAck::IsInitialized() const {
  return true;
}

void TxMsgAck::InternalSwap(TxMsgAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsgAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[4]);
}

// ===================================================================

class BuildBlockBroadcastMsg::_Internal {
 public:
  static const ::Vrf& vrfinfo(const BuildBlockBroadcastMsg* msg);
};

const ::Vrf&
BuildBlockBroadcastMsg::_Internal::vrfinfo(const BuildBlockBroadcastMsg* msg) {
  return *msg->_impl_.vrfinfo_;
}
BuildBlockBroadcastMsg::BuildBlockBroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BuildBlockBroadcastMsg)
}
BuildBlockBroadcastMsg::BuildBlockBroadcastMsg(const BuildBlockBroadcastMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildBlockBroadcastMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.castaddrs_){from._impl_.castaddrs_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.blockraw_){}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blockraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockraw().empty()) {
    _this->_impl_.blockraw_.Set(from._internal_blockraw(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_impl_.vrfinfo_ = new ::Vrf(*from._impl_.vrfinfo_);
  }
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:BuildBlockBroadcastMsg)
}

inline void BuildBlockBroadcastMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.castaddrs_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.blockraw_){}
    , decltype(_impl_.vrfinfo_){nullptr}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blockraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildBlockBroadcastMsg::~BuildBlockBroadcastMsg() {
  // @@protoc_insertion_point(destructor:BuildBlockBroadcastMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildBlockBroadcastMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.castaddrs_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.id_.Destroy();
  _impl_.blockraw_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vrfinfo_;
}

void BuildBlockBroadcastMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildBlockBroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildBlockBroadcastMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.castaddrs_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.blockraw_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.vrfinfo_ != nullptr) {
    delete _impl_.vrfinfo_;
  }
  _impl_.vrfinfo_ = nullptr;
  ::memset(&_impl_.flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildBlockBroadcastMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsg.version"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsg.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes blockRaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_blockraw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vrf vrfInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrfinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string castAddrs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_castaddrs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsg.castAddrs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildBlockBroadcastMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildBlockBroadcastMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsg.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // bytes blockRaw = 3;
  if (!this->_internal_blockraw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blockraw(), target);
  }

  // .Vrf vrfInfo = 4;
  if (this->_internal_has_vrfinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vrfinfo(this),
        _Internal::vrfinfo(this).GetCachedSize(), target, stream);
  }

  // int32 flag = 5;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_flag(), target);
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_type(), target);
  }

  // repeated string castAddrs = 7;
  for (int i = 0, n = this->_internal_castaddrs_size(); i < n; i++) {
    const auto& s = this->_internal_castaddrs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsg.castAddrs");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildBlockBroadcastMsg)
  return target;
}

size_t BuildBlockBroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildBlockBroadcastMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string castAddrs = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.castaddrs_.size());
  for (int i = 0, n = _impl_.castaddrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.castaddrs_.Get(i));
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes blockRaw = 3;
  if (!this->_internal_blockraw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockraw());
  }

  // .Vrf vrfInfo = 4;
  if (this->_internal_has_vrfinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vrfinfo_);
  }

  // int32 flag = 5;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildBlockBroadcastMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildBlockBroadcastMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildBlockBroadcastMsg::GetClassData() const { return &_class_data_; }


void BuildBlockBroadcastMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildBlockBroadcastMsg*>(&to_msg);
  auto& from = static_cast<const BuildBlockBroadcastMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BuildBlockBroadcastMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.castaddrs_.MergeFrom(from._impl_.castaddrs_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_blockraw().empty()) {
    _this->_internal_set_blockraw(from._internal_blockraw());
  }
  if (from._internal_has_vrfinfo()) {
    _this->_internal_mutable_vrfinfo()->::Vrf::MergeFrom(
        from._internal_vrfinfo());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildBlockBroadcastMsg::CopyFrom(const BuildBlockBroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildBlockBroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildBlockBroadcastMsg::IsInitialized() const {
  return true;
}

void BuildBlockBroadcastMsg::InternalSwap(BuildBlockBroadcastMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.castaddrs_.InternalSwap(&other->_impl_.castaddrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockraw_, lhs_arena,
      &other->_impl_.blockraw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildBlockBroadcastMsg, _impl_.type_)
      + sizeof(BuildBlockBroadcastMsg::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BuildBlockBroadcastMsg, _impl_.vrfinfo_)>(
          reinterpret_cast<char*>(&_impl_.vrfinfo_),
          reinterpret_cast<char*>(&other->_impl_.vrfinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildBlockBroadcastMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[5]);
}

// ===================================================================

class BuildBlockBroadcastMsgAck::_Internal {
 public:
};

BuildBlockBroadcastMsgAck::BuildBlockBroadcastMsgAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BuildBlockBroadcastMsgAck)
}
BuildBlockBroadcastMsgAck::BuildBlockBroadcastMsgAck(const BuildBlockBroadcastMsgAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildBlockBroadcastMsgAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.blockhash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_success().empty()) {
    _this->_impl_.success_.Set(from._internal_success(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blockhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockhash().empty()) {
    _this->_impl_.blockhash_.Set(from._internal_blockhash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:BuildBlockBroadcastMsgAck)
}

inline void BuildBlockBroadcastMsgAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.blockhash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blockhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildBlockBroadcastMsgAck::~BuildBlockBroadcastMsgAck() {
  // @@protoc_insertion_point(destructor:BuildBlockBroadcastMsgAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildBlockBroadcastMsgAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.id_.Destroy();
  _impl_.success_.Destroy();
  _impl_.blockhash_.Destroy();
}

void BuildBlockBroadcastMsgAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildBlockBroadcastMsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildBlockBroadcastMsgAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.success_.ClearToEmpty();
  _impl_.blockhash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildBlockBroadcastMsgAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsgAck.version"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsgAck.id"));
        } else
          goto handle_unusual;
        continue;
      // string success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_success();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsgAck.success"));
        } else
          goto handle_unusual;
        continue;
      // string blockhash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_blockhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuildBlockBroadcastMsgAck.blockhash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildBlockBroadcastMsgAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildBlockBroadcastMsgAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsgAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsgAck.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string success = 3;
  if (!this->_internal_success().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsgAck.success");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_success(), target);
  }

  // string blockhash = 4;
  if (!this->_internal_blockhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blockhash().data(), static_cast<int>(this->_internal_blockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildBlockBroadcastMsgAck.blockhash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_blockhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildBlockBroadcastMsgAck)
  return target;
}

size_t BuildBlockBroadcastMsgAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildBlockBroadcastMsgAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string success = 3;
  if (!this->_internal_success().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // string blockhash = 4;
  if (!this->_internal_blockhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blockhash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildBlockBroadcastMsgAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildBlockBroadcastMsgAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildBlockBroadcastMsgAck::GetClassData() const { return &_class_data_; }


void BuildBlockBroadcastMsgAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildBlockBroadcastMsgAck*>(&to_msg);
  auto& from = static_cast<const BuildBlockBroadcastMsgAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BuildBlockBroadcastMsgAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_success().empty()) {
    _this->_internal_set_success(from._internal_success());
  }
  if (!from._internal_blockhash().empty()) {
    _this->_internal_set_blockhash(from._internal_blockhash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildBlockBroadcastMsgAck::CopyFrom(const BuildBlockBroadcastMsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildBlockBroadcastMsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildBlockBroadcastMsgAck::IsInitialized() const {
  return true;
}

void BuildBlockBroadcastMsgAck::InternalSwap(BuildBlockBroadcastMsgAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.success_, lhs_arena,
      &other->_impl_.success_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockhash_, lhs_arena,
      &other->_impl_.blockhash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildBlockBroadcastMsgAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[6]);
}

// ===================================================================

class TxPendingBroadcastMsg::_Internal {
 public:
};

TxPendingBroadcastMsg::TxPendingBroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TxPendingBroadcastMsg)
}
TxPendingBroadcastMsg::TxPendingBroadcastMsg(const TxPendingBroadcastMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxPendingBroadcastMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.txraw_){}
    , decltype(_impl_.prevblkheight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.txraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_txraw().empty()) {
    _this->_impl_.txraw_.Set(from._internal_txraw(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.prevblkheight_ = from._impl_.prevblkheight_;
  // @@protoc_insertion_point(copy_constructor:TxPendingBroadcastMsg)
}

inline void TxPendingBroadcastMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.txraw_){}
    , decltype(_impl_.prevblkheight_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.txraw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txraw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxPendingBroadcastMsg::~TxPendingBroadcastMsg() {
  // @@protoc_insertion_point(destructor:TxPendingBroadcastMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxPendingBroadcastMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.txraw_.Destroy();
}

void TxPendingBroadcastMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxPendingBroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:TxPendingBroadcastMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.txraw_.ClearToEmpty();
  _impl_.prevblkheight_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxPendingBroadcastMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TxPendingBroadcastMsg.version"));
        } else
          goto handle_unusual;
        continue;
      // bytes txRaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_txraw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 prevBlkHeight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.prevblkheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxPendingBroadcastMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxPendingBroadcastMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxPendingBroadcastMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // bytes txRaw = 2;
  if (!this->_internal_txraw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_txraw(), target);
  }

  // uint64 prevBlkHeight = 3;
  if (this->_internal_prevblkheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_prevblkheight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxPendingBroadcastMsg)
  return target;
}

size_t TxPendingBroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxPendingBroadcastMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes txRaw = 2;
  if (!this->_internal_txraw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txraw());
  }

  // uint64 prevBlkHeight = 3;
  if (this->_internal_prevblkheight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_prevblkheight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxPendingBroadcastMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxPendingBroadcastMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxPendingBroadcastMsg::GetClassData() const { return &_class_data_; }


void TxPendingBroadcastMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxPendingBroadcastMsg*>(&to_msg);
  auto& from = static_cast<const TxPendingBroadcastMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TxPendingBroadcastMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_txraw().empty()) {
    _this->_internal_set_txraw(from._internal_txraw());
  }
  if (from._internal_prevblkheight() != 0) {
    _this->_internal_set_prevblkheight(from._internal_prevblkheight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxPendingBroadcastMsg::CopyFrom(const TxPendingBroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxPendingBroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxPendingBroadcastMsg::IsInitialized() const {
  return true;
}

void TxPendingBroadcastMsg::InternalSwap(TxPendingBroadcastMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.txraw_, lhs_arena,
      &other->_impl_.txraw_, rhs_arena
  );
  swap(_impl_.prevblkheight_, other->_impl_.prevblkheight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxPendingBroadcastMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[7]);
}

// ===================================================================

class ConfirmTransactionReq::_Internal {
 public:
};

ConfirmTransactionReq::ConfirmTransactionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ConfirmTransactionReq)
}
ConfirmTransactionReq::ConfirmTransactionReq(const ConfirmTransactionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmTransactionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.flag_ = from._impl_.flag_;
  // @@protoc_insertion_point(copy_constructor:ConfirmTransactionReq)
}

inline void ConfirmTransactionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.flag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfirmTransactionReq::~ConfirmTransactionReq() {
  // @@protoc_insertion_point(destructor:ConfirmTransactionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmTransactionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.id_.Destroy();
  _impl_.tx_hash_.Destroy();
}

void ConfirmTransactionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmTransactionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfirmTransactionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmTransactionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionReq.version"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionReq.id"));
        } else
          goto handle_unusual;
        continue;
      // string tx_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionReq.tx_hash"));
        } else
          goto handle_unusual;
        continue;
      // .ConfirmCacheFlag flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::ConfirmCacheFlag>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmTransactionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfirmTransactionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionReq.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string tx_hash = 3;
  if (!this->_internal_tx_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionReq.tx_hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tx_hash(), target);
  }

  // .ConfirmCacheFlag flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfirmTransactionReq)
  return target;
}

size_t ConfirmTransactionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfirmTransactionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string tx_hash = 3;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  // .ConfirmCacheFlag flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmTransactionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmTransactionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmTransactionReq::GetClassData() const { return &_class_data_; }


void ConfirmTransactionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmTransactionReq*>(&to_msg);
  auto& from = static_cast<const ConfirmTransactionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ConfirmTransactionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmTransactionReq::CopyFrom(const ConfirmTransactionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfirmTransactionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmTransactionReq::IsInitialized() const {
  return true;
}

void ConfirmTransactionReq::InternalSwap(ConfirmTransactionReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena,
      &other->_impl_.tx_hash_, rhs_arena
  );
  swap(_impl_.flag_, other->_impl_.flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmTransactionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[8]);
}

// ===================================================================

class ConfirmTransactionAck::_Internal {
 public:
};

ConfirmTransactionAck::ConfirmTransactionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ConfirmTransactionAck)
}
ConfirmTransactionAck::ConfirmTransactionAck(const ConfirmTransactionAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmTransactionAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.block_raw_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_raw().empty()) {
    _this->_impl_.block_raw_.Set(from._internal_block_raw(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:ConfirmTransactionAck)
}

inline void ConfirmTransactionAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.block_raw_){}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfirmTransactionAck::~ConfirmTransactionAck() {
  // @@protoc_insertion_point(destructor:ConfirmTransactionAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmTransactionAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.id_.Destroy();
  _impl_.tx_hash_.Destroy();
  _impl_.block_raw_.Destroy();
}

void ConfirmTransactionAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmTransactionAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfirmTransactionAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.block_raw_.ClearToEmpty();
  ::memset(&_impl_.flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmTransactionAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionAck.version"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionAck.id"));
        } else
          goto handle_unusual;
        continue;
      // string tx_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionAck.tx_hash"));
        } else
          goto handle_unusual;
        continue;
      // .ConfirmCacheFlag flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::ConfirmCacheFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // bool success = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_raw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_block_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmTransactionAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfirmTransactionAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionAck.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string tx_hash = 3;
  if (!this->_internal_tx_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionAck.tx_hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tx_hash(), target);
  }

  // .ConfirmCacheFlag flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_flag(), target);
  }

  // bool success = 5;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_success(), target);
  }

  // bytes block_raw = 6;
  if (!this->_internal_block_raw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_block_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfirmTransactionAck)
  return target;
}

size_t ConfirmTransactionAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfirmTransactionAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string tx_hash = 3;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  // bytes block_raw = 6;
  if (!this->_internal_block_raw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_raw());
  }

  // .ConfirmCacheFlag flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // bool success = 5;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmTransactionAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmTransactionAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmTransactionAck::GetClassData() const { return &_class_data_; }


void ConfirmTransactionAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmTransactionAck*>(&to_msg);
  auto& from = static_cast<const ConfirmTransactionAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ConfirmTransactionAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_block_raw().empty()) {
    _this->_internal_set_block_raw(from._internal_block_raw());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmTransactionAck::CopyFrom(const ConfirmTransactionAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfirmTransactionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmTransactionAck::IsInitialized() const {
  return true;
}

void ConfirmTransactionAck::InternalSwap(ConfirmTransactionAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena,
      &other->_impl_.tx_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_raw_, lhs_arena,
      &other->_impl_.block_raw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfirmTransactionAck, _impl_.success_)
      + sizeof(ConfirmTransactionAck::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(ConfirmTransactionAck, _impl_.flag_)>(
          reinterpret_cast<char*>(&_impl_.flag_),
          reinterpret_cast<char*>(&other->_impl_.flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmTransactionAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[9]);
}

// ===================================================================

class ConfirmTransactionIsSuccessReq::_Internal {
 public:
};

ConfirmTransactionIsSuccessReq::ConfirmTransactionIsSuccessReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ConfirmTransactionIsSuccessReq)
}
ConfirmTransactionIsSuccessReq::ConfirmTransactionIsSuccessReq(const ConfirmTransactionIsSuccessReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmTransactionIsSuccessReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.block_raw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_raw().empty()) {
    _this->_impl_.block_raw_.Set(from._internal_block_raw(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ConfirmTransactionIsSuccessReq)
}

inline void ConfirmTransactionIsSuccessReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.block_raw_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfirmTransactionIsSuccessReq::~ConfirmTransactionIsSuccessReq() {
  // @@protoc_insertion_point(destructor:ConfirmTransactionIsSuccessReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmTransactionIsSuccessReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.id_.Destroy();
  _impl_.block_raw_.Destroy();
}

void ConfirmTransactionIsSuccessReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmTransactionIsSuccessReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfirmTransactionIsSuccessReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.block_raw_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmTransactionIsSuccessReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionIsSuccessReq.version"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionIsSuccessReq.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes block_raw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_block_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmTransactionIsSuccessReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfirmTransactionIsSuccessReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionIsSuccessReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionIsSuccessReq.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // bytes block_raw = 3;
  if (!this->_internal_block_raw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_block_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfirmTransactionIsSuccessReq)
  return target;
}

size_t ConfirmTransactionIsSuccessReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfirmTransactionIsSuccessReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes block_raw = 3;
  if (!this->_internal_block_raw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_raw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmTransactionIsSuccessReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmTransactionIsSuccessReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmTransactionIsSuccessReq::GetClassData() const { return &_class_data_; }


void ConfirmTransactionIsSuccessReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmTransactionIsSuccessReq*>(&to_msg);
  auto& from = static_cast<const ConfirmTransactionIsSuccessReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ConfirmTransactionIsSuccessReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_block_raw().empty()) {
    _this->_internal_set_block_raw(from._internal_block_raw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmTransactionIsSuccessReq::CopyFrom(const ConfirmTransactionIsSuccessReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfirmTransactionIsSuccessReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmTransactionIsSuccessReq::IsInitialized() const {
  return true;
}

void ConfirmTransactionIsSuccessReq::InternalSwap(ConfirmTransactionIsSuccessReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_raw_, lhs_arena,
      &other->_impl_.block_raw_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmTransactionIsSuccessReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[10]);
}

// ===================================================================

class ConfirmTransactionIsSuccessAck::_Internal {
 public:
};

ConfirmTransactionIsSuccessAck::ConfirmTransactionIsSuccessAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ConfirmTransactionIsSuccessAck)
}
ConfirmTransactionIsSuccessAck::ConfirmTransactionIsSuccessAck(const ConfirmTransactionIsSuccessAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConfirmTransactionIsSuccessAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.block_raw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_success().empty()) {
    _this->_impl_.success_.Set(from._internal_success(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_raw().empty()) {
    _this->_impl_.block_raw_.Set(from._internal_block_raw(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ConfirmTransactionIsSuccessAck)
}

inline void ConfirmTransactionIsSuccessAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.block_raw_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.success_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.success_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_raw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_raw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConfirmTransactionIsSuccessAck::~ConfirmTransactionIsSuccessAck() {
  // @@protoc_insertion_point(destructor:ConfirmTransactionIsSuccessAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfirmTransactionIsSuccessAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.id_.Destroy();
  _impl_.success_.Destroy();
  _impl_.block_raw_.Destroy();
}

void ConfirmTransactionIsSuccessAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConfirmTransactionIsSuccessAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfirmTransactionIsSuccessAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.success_.ClearToEmpty();
  _impl_.block_raw_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfirmTransactionIsSuccessAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionIsSuccessAck.version"));
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionIsSuccessAck.id"));
        } else
          goto handle_unusual;
        continue;
      // string success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_success();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ConfirmTransactionIsSuccessAck.success"));
        } else
          goto handle_unusual;
        continue;
      // bytes block_raw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfirmTransactionIsSuccessAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfirmTransactionIsSuccessAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionIsSuccessAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionIsSuccessAck.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string success = 3;
  if (!this->_internal_success().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success().data(), static_cast<int>(this->_internal_success().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConfirmTransactionIsSuccessAck.success");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_success(), target);
  }

  // bytes block_raw = 4;
  if (!this->_internal_block_raw().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfirmTransactionIsSuccessAck)
  return target;
}

size_t ConfirmTransactionIsSuccessAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfirmTransactionIsSuccessAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string success = 3;
  if (!this->_internal_success().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_success());
  }

  // bytes block_raw = 4;
  if (!this->_internal_block_raw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_raw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfirmTransactionIsSuccessAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConfirmTransactionIsSuccessAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfirmTransactionIsSuccessAck::GetClassData() const { return &_class_data_; }


void ConfirmTransactionIsSuccessAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConfirmTransactionIsSuccessAck*>(&to_msg);
  auto& from = static_cast<const ConfirmTransactionIsSuccessAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ConfirmTransactionIsSuccessAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_success().empty()) {
    _this->_internal_set_success(from._internal_success());
  }
  if (!from._internal_block_raw().empty()) {
    _this->_internal_set_block_raw(from._internal_block_raw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfirmTransactionIsSuccessAck::CopyFrom(const ConfirmTransactionIsSuccessAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfirmTransactionIsSuccessAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmTransactionIsSuccessAck::IsInitialized() const {
  return true;
}

void ConfirmTransactionIsSuccessAck::InternalSwap(ConfirmTransactionIsSuccessAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.success_, lhs_arena,
      &other->_impl_.success_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_raw_, lhs_arena,
      &other->_impl_.block_raw_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmTransactionIsSuccessAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[11]);
}

// ===================================================================

class FailureBroadcastMsg::_Internal {
 public:
};

FailureBroadcastMsg::FailureBroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FailureBroadcastMsg)
}
FailureBroadcastMsg::FailureBroadcastMsg(const FailureBroadcastMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FailureBroadcastMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FailureBroadcastMsg)
}

inline void FailureBroadcastMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.info_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FailureBroadcastMsg::~FailureBroadcastMsg() {
  // @@protoc_insertion_point(destructor:FailureBroadcastMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FailureBroadcastMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.tx_.Destroy();
  _impl_.info_.Destroy();
}

void FailureBroadcastMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FailureBroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FailureBroadcastMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.tx_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FailureBroadcastMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FailureBroadcastMsg.version"));
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FailureBroadcastMsg.info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FailureBroadcastMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FailureBroadcastMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FailureBroadcastMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // bytes tx = 2;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx(), target);
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FailureBroadcastMsg.info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FailureBroadcastMsg)
  return target;
}

size_t FailureBroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FailureBroadcastMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes tx = 2;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // string info = 3;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FailureBroadcastMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FailureBroadcastMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FailureBroadcastMsg::GetClassData() const { return &_class_data_; }


void FailureBroadcastMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FailureBroadcastMsg*>(&to_msg);
  auto& from = static_cast<const FailureBroadcastMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FailureBroadcastMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FailureBroadcastMsg::CopyFrom(const FailureBroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FailureBroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailureBroadcastMsg::IsInitialized() const {
  return true;
}

void FailureBroadcastMsg::InternalSwap(FailureBroadcastMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FailureBroadcastMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ca_5fprotomsg_2eproto_getter, &descriptor_table_ca_5fprotomsg_2eproto_once,
      file_level_metadata_ca_5fprotomsg_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SignNodeMsg*
Arena::CreateMaybeMessage< ::SignNodeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SignNodeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::TxMsgInfo*
Arena::CreateMaybeMessage< ::TxMsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxMsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TxMsgReq*
Arena::CreateMaybeMessage< ::TxMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Vrf*
Arena::CreateMaybeMessage< ::Vrf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vrf >(arena);
}
template<> PROTOBUF_NOINLINE ::TxMsgAck*
Arena::CreateMaybeMessage< ::TxMsgAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxMsgAck >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildBlockBroadcastMsg*
Arena::CreateMaybeMessage< ::BuildBlockBroadcastMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildBlockBroadcastMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildBlockBroadcastMsgAck*
Arena::CreateMaybeMessage< ::BuildBlockBroadcastMsgAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildBlockBroadcastMsgAck >(arena);
}
template<> PROTOBUF_NOINLINE ::TxPendingBroadcastMsg*
Arena::CreateMaybeMessage< ::TxPendingBroadcastMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TxPendingBroadcastMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfirmTransactionReq*
Arena::CreateMaybeMessage< ::ConfirmTransactionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfirmTransactionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfirmTransactionAck*
Arena::CreateMaybeMessage< ::ConfirmTransactionAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfirmTransactionAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfirmTransactionIsSuccessReq*
Arena::CreateMaybeMessage< ::ConfirmTransactionIsSuccessReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfirmTransactionIsSuccessReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfirmTransactionIsSuccessAck*
Arena::CreateMaybeMessage< ::ConfirmTransactionIsSuccessAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConfirmTransactionIsSuccessAck >(arena);
}
template<> PROTOBUF_NOINLINE ::FailureBroadcastMsg*
Arena::CreateMaybeMessage< ::FailureBroadcastMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FailureBroadcastMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
