// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
#include "ca_protomsg.pb.h"
#include "sign.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto;
class BlockMsg;
struct BlockMsgDefaultTypeInternal;
extern BlockMsgDefaultTypeInternal _BlockMsg_default_instance_;
class CBlock;
struct CBlockDefaultTypeInternal;
extern CBlockDefaultTypeInternal _CBlock_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BlockMsg* Arena::CreateMaybeMessage<::BlockMsg>(Arena*);
template<> ::CBlock* Arena::CreateMaybeMessage<::CBlock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBlock) */ {
 public:
  inline CBlock() : CBlock(nullptr) {}
  ~CBlock() override;
  explicit PROTOBUF_CONSTEXPR CBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBlock(const CBlock& from);
  CBlock(CBlock&& from) noexcept
    : CBlock() {
    *this = ::std::move(from);
  }

  inline CBlock& operator=(const CBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBlock& operator=(CBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBlock* internal_default_instance() {
    return reinterpret_cast<const CBlock*>(
               &_CBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBlock& a, CBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(CBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CBlock& from) {
    CBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBlock";
  }
  protected:
  explicit CBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 7,
    kSignFieldNumber = 10,
    kHashFieldNumber = 3,
    kPrevHashFieldNumber = 4,
    kMerkleRootFieldNumber = 6,
    kDataFieldNumber = 8,
    kInfoFieldNumber = 9,
    kReserve0FieldNumber = 11,
    kReserve1FieldNumber = 12,
    kTimeFieldNumber = 2,
    kHeightFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // repeated .CTransaction txs = 7;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::CTransaction* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >*
      mutable_txs();
  private:
  const ::CTransaction& _internal_txs(int index) const;
  ::CTransaction* _internal_add_txs();
  public:
  const ::CTransaction& txs(int index) const;
  ::CTransaction* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >&
      txs() const;

  // repeated .CSign sign = 10;
  int sign_size() const;
  private:
  int _internal_sign_size() const;
  public:
  void clear_sign();
  ::CSign* mutable_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >*
      mutable_sign();
  private:
  const ::CSign& _internal_sign(int index) const;
  ::CSign* _internal_add_sign();
  public:
  const ::CSign& sign(int index) const;
  ::CSign* add_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >&
      sign() const;

  // string hash = 3;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string prevHash = 4;
  void clear_prevhash();
  const std::string& prevhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prevhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prevhash();
  PROTOBUF_NODISCARD std::string* release_prevhash();
  void set_allocated_prevhash(std::string* prevhash);
  private:
  const std::string& _internal_prevhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prevhash(const std::string& value);
  std::string* _internal_mutable_prevhash();
  public:

  // string merkleRoot = 6;
  void clear_merkleroot();
  const std::string& merkleroot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_merkleroot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_merkleroot();
  PROTOBUF_NODISCARD std::string* release_merkleroot();
  void set_allocated_merkleroot(std::string* merkleroot);
  private:
  const std::string& _internal_merkleroot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_merkleroot(const std::string& value);
  std::string* _internal_mutable_merkleroot();
  public:

  // string data = 8;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string info = 9;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string reserve0 = 11;
  void clear_reserve0();
  const std::string& reserve0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve0();
  PROTOBUF_NODISCARD std::string* release_reserve0();
  void set_allocated_reserve0(std::string* reserve0);
  private:
  const std::string& _internal_reserve0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve0(const std::string& value);
  std::string* _internal_mutable_reserve0();
  public:

  // string reserve1 = 12;
  void clear_reserve1();
  const std::string& reserve1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve1();
  PROTOBUF_NODISCARD std::string* release_reserve1();
  void set_allocated_reserve1(std::string* reserve1);
  private:
  const std::string& _internal_reserve1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve1(const std::string& value);
  std::string* _internal_mutable_reserve1();
  public:

  // uint64 time = 2;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // int64 height = 5;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction > txs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign > sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkleroot_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve1_;
    uint64_t time_;
    int64_t height_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class BlockMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockMsg) */ {
 public:
  inline BlockMsg() : BlockMsg(nullptr) {}
  ~BlockMsg() override;
  explicit PROTOBUF_CONSTEXPR BlockMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMsg(const BlockMsg& from);
  BlockMsg(BlockMsg&& from) noexcept
    : BlockMsg() {
    *this = ::std::move(from);
  }

  inline BlockMsg& operator=(const BlockMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMsg& operator=(BlockMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMsg* internal_default_instance() {
    return reinterpret_cast<const BlockMsg*>(
               &_BlockMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockMsg& a, BlockMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockMsg& from) {
    BlockMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockMsg";
  }
  protected:
  explicit BlockMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfInfoFieldNumber = 6,
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kBlockFieldNumber = 5,
    kTimeFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // repeated .Vrf vrfInfo = 6;
  int vrfinfo_size() const;
  private:
  int _internal_vrfinfo_size() const;
  public:
  void clear_vrfinfo();
  ::Vrf* mutable_vrfinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
      mutable_vrfinfo();
  private:
  const ::Vrf& _internal_vrfinfo(int index) const;
  ::Vrf* _internal_add_vrfinfo();
  public:
  const ::Vrf& vrfinfo(int index) const;
  ::Vrf* add_vrfinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
      vrfinfo() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes block = 5;
  void clear_block();
  const std::string& block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block();
  PROTOBUF_NODISCARD std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // uint64 time = 4;
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // sint32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BlockMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf > vrfinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
    uint64_t time_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBlock

// uint32 version = 1;
inline void CBlock::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t CBlock::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CBlock::version() const {
  // @@protoc_insertion_point(field_get:CBlock.version)
  return _internal_version();
}
inline void CBlock::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void CBlock::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CBlock.version)
}

// uint64 time = 2;
inline void CBlock::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t CBlock::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t CBlock::time() const {
  // @@protoc_insertion_point(field_get:CBlock.time)
  return _internal_time();
}
inline void CBlock::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void CBlock::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBlock.time)
}

// string hash = 3;
inline void CBlock::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& CBlock::hash() const {
  // @@protoc_insertion_point(field_get:CBlock.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.hash)
}
inline std::string* CBlock::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:CBlock.hash)
  return _s;
}
inline const std::string& CBlock::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void CBlock::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_hash() {
  // @@protoc_insertion_point(field_release:CBlock.hash)
  return _impl_.hash_.Release();
}
inline void CBlock::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.hash)
}

// string prevHash = 4;
inline void CBlock::clear_prevhash() {
  _impl_.prevhash_.ClearToEmpty();
}
inline const std::string& CBlock::prevhash() const {
  // @@protoc_insertion_point(field_get:CBlock.prevHash)
  return _internal_prevhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_prevhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prevhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.prevHash)
}
inline std::string* CBlock::mutable_prevhash() {
  std::string* _s = _internal_mutable_prevhash();
  // @@protoc_insertion_point(field_mutable:CBlock.prevHash)
  return _s;
}
inline const std::string& CBlock::_internal_prevhash() const {
  return _impl_.prevhash_.Get();
}
inline void CBlock::_internal_set_prevhash(const std::string& value) {
  
  _impl_.prevhash_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_prevhash() {
  
  return _impl_.prevhash_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_prevhash() {
  // @@protoc_insertion_point(field_release:CBlock.prevHash)
  return _impl_.prevhash_.Release();
}
inline void CBlock::set_allocated_prevhash(std::string* prevhash) {
  if (prevhash != nullptr) {
    
  } else {
    
  }
  _impl_.prevhash_.SetAllocated(prevhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prevhash_.IsDefault()) {
    _impl_.prevhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.prevHash)
}

// int64 height = 5;
inline void CBlock::clear_height() {
  _impl_.height_ = int64_t{0};
}
inline int64_t CBlock::_internal_height() const {
  return _impl_.height_;
}
inline int64_t CBlock::height() const {
  // @@protoc_insertion_point(field_get:CBlock.height)
  return _internal_height();
}
inline void CBlock::_internal_set_height(int64_t value) {
  
  _impl_.height_ = value;
}
inline void CBlock::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CBlock.height)
}

// string merkleRoot = 6;
inline void CBlock::clear_merkleroot() {
  _impl_.merkleroot_.ClearToEmpty();
}
inline const std::string& CBlock::merkleroot() const {
  // @@protoc_insertion_point(field_get:CBlock.merkleRoot)
  return _internal_merkleroot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_merkleroot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.merkleroot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.merkleRoot)
}
inline std::string* CBlock::mutable_merkleroot() {
  std::string* _s = _internal_mutable_merkleroot();
  // @@protoc_insertion_point(field_mutable:CBlock.merkleRoot)
  return _s;
}
inline const std::string& CBlock::_internal_merkleroot() const {
  return _impl_.merkleroot_.Get();
}
inline void CBlock::_internal_set_merkleroot(const std::string& value) {
  
  _impl_.merkleroot_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_merkleroot() {
  
  return _impl_.merkleroot_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_merkleroot() {
  // @@protoc_insertion_point(field_release:CBlock.merkleRoot)
  return _impl_.merkleroot_.Release();
}
inline void CBlock::set_allocated_merkleroot(std::string* merkleroot) {
  if (merkleroot != nullptr) {
    
  } else {
    
  }
  _impl_.merkleroot_.SetAllocated(merkleroot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.merkleroot_.IsDefault()) {
    _impl_.merkleroot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.merkleRoot)
}

// repeated .CTransaction txs = 7;
inline int CBlock::_internal_txs_size() const {
  return _impl_.txs_.size();
}
inline int CBlock::txs_size() const {
  return _internal_txs_size();
}
inline ::CTransaction* CBlock::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:CBlock.txs)
  return _impl_.txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >*
CBlock::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:CBlock.txs)
  return &_impl_.txs_;
}
inline const ::CTransaction& CBlock::_internal_txs(int index) const {
  return _impl_.txs_.Get(index);
}
inline const ::CTransaction& CBlock::txs(int index) const {
  // @@protoc_insertion_point(field_get:CBlock.txs)
  return _internal_txs(index);
}
inline ::CTransaction* CBlock::_internal_add_txs() {
  return _impl_.txs_.Add();
}
inline ::CTransaction* CBlock::add_txs() {
  ::CTransaction* _add = _internal_add_txs();
  // @@protoc_insertion_point(field_add:CBlock.txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >&
CBlock::txs() const {
  // @@protoc_insertion_point(field_list:CBlock.txs)
  return _impl_.txs_;
}

// string data = 8;
inline void CBlock::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CBlock::data() const {
  // @@protoc_insertion_point(field_get:CBlock.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.data)
}
inline std::string* CBlock::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CBlock.data)
  return _s;
}
inline const std::string& CBlock::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CBlock::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_data() {
  // @@protoc_insertion_point(field_release:CBlock.data)
  return _impl_.data_.Release();
}
inline void CBlock::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.data)
}

// string info = 9;
inline void CBlock::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& CBlock::info() const {
  // @@protoc_insertion_point(field_get:CBlock.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.info)
}
inline std::string* CBlock::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:CBlock.info)
  return _s;
}
inline const std::string& CBlock::_internal_info() const {
  return _impl_.info_.Get();
}
inline void CBlock::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_info() {
  // @@protoc_insertion_point(field_release:CBlock.info)
  return _impl_.info_.Release();
}
inline void CBlock::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.info)
}

// repeated .CSign sign = 10;
inline int CBlock::_internal_sign_size() const {
  return _impl_.sign_.size();
}
inline int CBlock::sign_size() const {
  return _internal_sign_size();
}
inline ::CSign* CBlock::mutable_sign(int index) {
  // @@protoc_insertion_point(field_mutable:CBlock.sign)
  return _impl_.sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >*
CBlock::mutable_sign() {
  // @@protoc_insertion_point(field_mutable_list:CBlock.sign)
  return &_impl_.sign_;
}
inline const ::CSign& CBlock::_internal_sign(int index) const {
  return _impl_.sign_.Get(index);
}
inline const ::CSign& CBlock::sign(int index) const {
  // @@protoc_insertion_point(field_get:CBlock.sign)
  return _internal_sign(index);
}
inline ::CSign* CBlock::_internal_add_sign() {
  return _impl_.sign_.Add();
}
inline ::CSign* CBlock::add_sign() {
  ::CSign* _add = _internal_add_sign();
  // @@protoc_insertion_point(field_add:CBlock.sign)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSign >&
CBlock::sign() const {
  // @@protoc_insertion_point(field_list:CBlock.sign)
  return _impl_.sign_;
}

// string reserve0 = 11;
inline void CBlock::clear_reserve0() {
  _impl_.reserve0_.ClearToEmpty();
}
inline const std::string& CBlock::reserve0() const {
  // @@protoc_insertion_point(field_get:CBlock.reserve0)
  return _internal_reserve0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_reserve0(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reserve0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.reserve0)
}
inline std::string* CBlock::mutable_reserve0() {
  std::string* _s = _internal_mutable_reserve0();
  // @@protoc_insertion_point(field_mutable:CBlock.reserve0)
  return _s;
}
inline const std::string& CBlock::_internal_reserve0() const {
  return _impl_.reserve0_.Get();
}
inline void CBlock::_internal_set_reserve0(const std::string& value) {
  
  _impl_.reserve0_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_reserve0() {
  
  return _impl_.reserve0_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_reserve0() {
  // @@protoc_insertion_point(field_release:CBlock.reserve0)
  return _impl_.reserve0_.Release();
}
inline void CBlock::set_allocated_reserve0(std::string* reserve0) {
  if (reserve0 != nullptr) {
    
  } else {
    
  }
  _impl_.reserve0_.SetAllocated(reserve0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserve0_.IsDefault()) {
    _impl_.reserve0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.reserve0)
}

// string reserve1 = 12;
inline void CBlock::clear_reserve1() {
  _impl_.reserve1_.ClearToEmpty();
}
inline const std::string& CBlock::reserve1() const {
  // @@protoc_insertion_point(field_get:CBlock.reserve1)
  return _internal_reserve1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBlock::set_reserve1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reserve1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBlock.reserve1)
}
inline std::string* CBlock::mutable_reserve1() {
  std::string* _s = _internal_mutable_reserve1();
  // @@protoc_insertion_point(field_mutable:CBlock.reserve1)
  return _s;
}
inline const std::string& CBlock::_internal_reserve1() const {
  return _impl_.reserve1_.Get();
}
inline void CBlock::_internal_set_reserve1(const std::string& value) {
  
  _impl_.reserve1_.Set(value, GetArenaForAllocation());
}
inline std::string* CBlock::_internal_mutable_reserve1() {
  
  return _impl_.reserve1_.Mutable(GetArenaForAllocation());
}
inline std::string* CBlock::release_reserve1() {
  // @@protoc_insertion_point(field_release:CBlock.reserve1)
  return _impl_.reserve1_.Release();
}
inline void CBlock::set_allocated_reserve1(std::string* reserve1) {
  if (reserve1 != nullptr) {
    
  } else {
    
  }
  _impl_.reserve1_.SetAllocated(reserve1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reserve1_.IsDefault()) {
    _impl_.reserve1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBlock.reserve1)
}

// -------------------------------------------------------------------

// BlockMsg

// string version = 1;
inline void BlockMsg::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& BlockMsg::version() const {
  // @@protoc_insertion_point(field_get:BlockMsg.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockMsg::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockMsg.version)
}
inline std::string* BlockMsg::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:BlockMsg.version)
  return _s;
}
inline const std::string& BlockMsg::_internal_version() const {
  return _impl_.version_.Get();
}
inline void BlockMsg::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockMsg::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockMsg::release_version() {
  // @@protoc_insertion_point(field_release:BlockMsg.version)
  return _impl_.version_.Release();
}
inline void BlockMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockMsg.version)
}

// sint32 code = 2;
inline void BlockMsg::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t BlockMsg::_internal_code() const {
  return _impl_.code_;
}
inline int32_t BlockMsg::code() const {
  // @@protoc_insertion_point(field_get:BlockMsg.code)
  return _internal_code();
}
inline void BlockMsg::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void BlockMsg::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BlockMsg.code)
}

// string message = 3;
inline void BlockMsg::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& BlockMsg::message() const {
  // @@protoc_insertion_point(field_get:BlockMsg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockMsg::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockMsg.message)
}
inline std::string* BlockMsg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:BlockMsg.message)
  return _s;
}
inline const std::string& BlockMsg::_internal_message() const {
  return _impl_.message_.Get();
}
inline void BlockMsg::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockMsg::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockMsg::release_message() {
  // @@protoc_insertion_point(field_release:BlockMsg.message)
  return _impl_.message_.Release();
}
inline void BlockMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockMsg.message)
}

// uint64 time = 4;
inline void BlockMsg::clear_time() {
  _impl_.time_ = uint64_t{0u};
}
inline uint64_t BlockMsg::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t BlockMsg::time() const {
  // @@protoc_insertion_point(field_get:BlockMsg.time)
  return _internal_time();
}
inline void BlockMsg::_internal_set_time(uint64_t value) {
  
  _impl_.time_ = value;
}
inline void BlockMsg::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BlockMsg.time)
}

// bytes block = 5;
inline void BlockMsg::clear_block() {
  _impl_.block_.ClearToEmpty();
}
inline const std::string& BlockMsg::block() const {
  // @@protoc_insertion_point(field_get:BlockMsg.block)
  return _internal_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockMsg::set_block(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BlockMsg.block)
}
inline std::string* BlockMsg::mutable_block() {
  std::string* _s = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:BlockMsg.block)
  return _s;
}
inline const std::string& BlockMsg::_internal_block() const {
  return _impl_.block_.Get();
}
inline void BlockMsg::_internal_set_block(const std::string& value) {
  
  _impl_.block_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockMsg::_internal_mutable_block() {
  
  return _impl_.block_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockMsg::release_block() {
  // @@protoc_insertion_point(field_release:BlockMsg.block)
  return _impl_.block_.Release();
}
inline void BlockMsg::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    
  } else {
    
  }
  _impl_.block_.SetAllocated(block, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_.IsDefault()) {
    _impl_.block_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockMsg.block)
}

// repeated .Vrf vrfInfo = 6;
inline int BlockMsg::_internal_vrfinfo_size() const {
  return _impl_.vrfinfo_.size();
}
inline int BlockMsg::vrfinfo_size() const {
  return _internal_vrfinfo_size();
}
inline ::Vrf* BlockMsg::mutable_vrfinfo(int index) {
  // @@protoc_insertion_point(field_mutable:BlockMsg.vrfInfo)
  return _impl_.vrfinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >*
BlockMsg::mutable_vrfinfo() {
  // @@protoc_insertion_point(field_mutable_list:BlockMsg.vrfInfo)
  return &_impl_.vrfinfo_;
}
inline const ::Vrf& BlockMsg::_internal_vrfinfo(int index) const {
  return _impl_.vrfinfo_.Get(index);
}
inline const ::Vrf& BlockMsg::vrfinfo(int index) const {
  // @@protoc_insertion_point(field_get:BlockMsg.vrfInfo)
  return _internal_vrfinfo(index);
}
inline ::Vrf* BlockMsg::_internal_add_vrfinfo() {
  return _impl_.vrfinfo_.Add();
}
inline ::Vrf* BlockMsg::add_vrfinfo() {
  ::Vrf* _add = _internal_add_vrfinfo();
  // @@protoc_insertion_point(field_add:BlockMsg.vrfInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vrf >&
BlockMsg::vrfinfo() const {
  // @@protoc_insertion_point(field_list:BlockMsg.vrfInfo)
  return _impl_.vrfinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_2eproto
